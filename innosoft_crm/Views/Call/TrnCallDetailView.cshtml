@{
    ViewBag.Title = "Call Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body .modal-dialog {
        width: 900px;
    }
</style>

<br />
<div class="container">
    <section id="callsViewModel">
        <div class="row clearfix">
            <div class="row clearfix">
                <div class="col-md-10">
                    <button type="button" class="btn btn-labeled btn-primary" onclick="cmdSave_onclick()">
                        <span class="btn-label"><i class="glyphicon glyphicon-save"></i></span>Save
                    </button>
                    <button type="button" class="btn btn-labeled btn-danger" onclick="cmdClose_onclick()">
                        <span class="btn-label"><i class="glyphicon glyphicon-eject"></i></span>Close
                    </button>
                </div>
                <div class="col-md-2">
                    <h4 class="pull-right"><span class="glyphicon glyphicon-phone"></span> Call</h4>
                </div>
            </div>
        </div>
        <div class="row clearfix">
            <input type="hidden" id="CustomerIdMem" data-bind="value: CustomerId" />
            <input type="hidden" id="ProductIdMem" data-bind="value: ProductId" />
            <input type="hidden" id="CallStatusIdMem" data-bind="value: CallStatusId" />
            <input type="hidden" id="AnsweredByIdMem" data-bind="value: AnsweredById" />
            <input type="hidden" id="AssignedToIdMem" data-bind="value: AssignedtoId" />
        </div>
        <div class="row clearfix">
            <div class="col-md-6">
                <label class="label label-danger">Call No: </label>
                <div class="right-inner-addon ">
                    <i class="glyphicon glyphicon-barcode"></i>
                    <input type="text" class="form-control" id="Id" name="Id" placeholder="Id" data-bind="value: Id" disabled="disabled" />
                </div>
                <br />
                <label class="label label-default">Date Called: </label>
                <div class="right-inner-addon " data-date-format="mm-dd-yyyy">
                    <span class="add-on">
                        <i class="glyphicon glyphicon-time"></i>
                        <input type="text" class="form-control" id="DateCalledMem" name="DateCalled" placeholder="Date Called" data-bind="value: DateCalled" />
                    </span>
                </div>
                <br />
                <label class="label label-default">Customer: </label><br />
                <input type="text" id="CustomerIdSelect" value="Initializing ...." name="Customer" class=" select2" style="width:280px;" />
                <br />
                <br />
                <label class="label label-default">Product: </label><br />
                <input type="text" id="ProductIdSelect" value="Initializing ...." name="Product" class="select2" style="width:280px;" />
                <br />
                <br />
                <label class="label label-default">Caller: </label>
                <input type="text" class="form-control" id="CallerMem" name="Caller" placeholder="Caller" data-bind="value: Caller" />
                <br />
            </div>
            <div class="col-md-6">
                <label class="label label-default">Issue: </label>
                <textarea class="form-control" rows="3" id="IssueMem" name="Issue" placeholder="Issue" data-bind="value: Issue" style="height: 115px; width: 400px;"></textarea>
                <br />
                <label class="label label-default">Call Status: </label><br />
                <input type="text" id="CallStatusIdSelect" value="Initializing ...." name="CallStatusId" class="select2" style="width:280px;" />
                <br />
                <br />
                <label class="label label-default">Answered By: </label><br />
                <input type="text" id="AnsweredByIdSelect" value="Initializing ...." name="AnsweredById" class="select2" style="width:280px;" />
                <br />
                <br />
                <label class="label label-default">Assigned To: </label><br />
                <input type="text" id="AssignedToIdSelect" value="Initializing ...." name="AssignedToId" class="select2" style="width:280px;" />
                <br />

            </div>
        </div>
    </section>
    <section id="callActionList">
        <div class="row clearfix">
            <div class="col-md-12">
                &nbsp;
                <button type="button" id="cmdAdd" class="btn btn-labeled btn-primary" onclick="cmdAddCallAction_onClick()">
                    <span class="btn-label"><i class="glyphicon glyphicon-plus-sign"></i></span>Create
                </button>
                <div class="table-responsive">
                    <table id="TrnCallActionListDatable" class="table table-condensed table-striped ">
                        <thead>
                        <tr></tr>
                        <tr>
                            <th>Detail</th>
                            <th>Delete</th>
                            <th>Acted By</th>
                            <th>Call Action</th>
                            <th>Accepted Date</th>
                            <th>Action Type</th>
                            <th>Done</th>
                        </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot>
                        </tfoot>
                    </table>
                </div>

            </div>
        </div>
    </section>
    <section id="callActionsViewModel">
        <div class="row clearfix">
            <div class="modal fade" id="callActionModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <div class="row clearfix">
                                <div class="col-md-10">
                                    <button type="button" class="btn btn-labeled btn-success" onclick="cmdCallActionPrint_onClick()">
                                        <span class="btn-label"><i class="glyphicon glyphicon-print"></i></span>Print
                                    </button>
                                    <button type="button" class="btn btn-labeled btn-primary" data-dismiss="modal" onclick="cmdSaveCallAction_onClick()">
                                        <span class=" btn-label">
                                            <i class="glyphicon glyphicon-save"></i>
                                        </span>Save
                                    </button>
                                    <button type="button" class="btn btn-labeled btn-danger" data-dismiss="modal" onclick="cmdCallActionClose_onClick()">
                                        <span class=" btn-label">
                                            <i class="glyphicon glyphicon-eject"></i>
                                        </span>Close
                                    </button>
                                </div>
                                <div class=" col-md-2">
                                    <h4 class="modal-title pull-right" id="myModalLabel"><span class="glyphicon glyphicon-phone"></span> Call Action</h4>
                                </div>
                            </div>
                        </div>
                        <div class="modal-body" style="width:900px; overflow:auto;">
                            <div class="row clearfix">
                                <input type="hidden" id="ActedByIdMem" data-bind="value: ActedBy" />
                                <input type="hidden" id="ActionTypeIdMem" data-bind="value: ActionTypeId" />
                                <input type="hidden" id="DoneMem" data-bind="value: Done" />
                            </div>
                            <div class="row clearfix">
                                <div class="col-md-4">
                                    <label class="label label-danger">Ticket No: </label>
                                    <input type="text" class="form-control"  id="CallActionId" name="CallActionId" placeholder="Id" data-bind="value: CallActionId" disabled="disabled"/>
                                    <br>
                                    <label class="label label-danger">Call No: </label>
                                    <input type="text" class="form-control" id="CallIdMem" name="CallId" placeholder="Call Id" data-bind="value: CallId" disabled="disabled" />
                                    <br />
                                    <label class="label label-default">Encoded Date: </label>
                                    <input type="text" class="form-control" id="EncodedDateMem" name="EncodedDate" placeholder="Encoded Date" data-bind="value: EncodedDate" />
                                    <br />
                                    <label class="label label-default">Action: </label>
                                    <textarea class="form-control" rows="7" id="ActionMem" name="Action" placeholder="Action" data-bind="value: Action"></textarea>
                                    <br />
                                    <label class="label label-default">Acted By: </label>
                                    <br />
                                    <input type="text" id="ActedByIdSelect" value="Initializing ...." name="ActedById" class=" select2" style="width:267px; height:25px" />
                                </div>
                                <div class="col-md-4">
                                    <label class="label label-default">Action Type: </label>
                                    <input type="text" id="ActionTypeIdSelect" value="Initializing ...." name="ActionTypeId" class=" select2" placeholder="Action Type" style="width:267px; height:25px" />
                                    <br>
                                    <br>
                                    <label class="label label-default">Target Date : </label>
                                    <input type="text" class="form-control" id="TargetDateMem" name="TargetDate" placeholder="Target Date" data-bind="value: TargetDate" />
                                    <br />
                                    <label class="label label-default">Target Time : </label>
                                    <input type="text" class="form-control" id="TargetTimeMem" name="TargetTime" placeholder="Target Time" data-bind="value: TargetTime" />
                                    <br />
                                    <label class="label label-default">Accepted Date: </label>
                                    <input type="text" class="form-control" id="AcceptedDateMem" name="AcceptedDate" placeholder="Accepted Date" data-bind="value: AcceptedDate" />
                                    <br />
                                    <label class="label label-default">Accepted Time: </label>
                                    <input type="text" class="form-control" id="AcceptedTimeMem" name="AcceptedTime" placeholder="Accepted Time" data-bind="value: AcceptedTime" />
                                    <br />
                                    <label class="label label-default">Accepted By: </label>
                                    <input type="text" class="form-control" id="AcceptedByMem" name="AcceptedBy" placeholder="Accepted By" data-bind="value: AcceptedBy" />
                                    <br />
                                </div>
                                <div class="col-md-4">
                                    <label class="label label-default">Cost: </label>
                                    <input type="text" class="form-control" id="CostMem" name="Cost" placeholder="Cost" data-bind="value: Cost" />
                                    <br />
                                    <label class="label label-default">Number Of Hours: </label>
                                    <input type="text" class="form-control" id="NumberOfHoursMem" name="NumberOfHours" placeholder="Number Of Hours" disabled="disabled" data-bind="value: NumberOfHours" />
                                    <br />
                                    <label class="label label-default">Done: </label>
                                    <br />
                                    <select id="DoneSelect" class="select2" name="Done" style="width:267px; height:25px">
                                        <option value="true">true</option>
                                        <option value="false">false</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-8">
                                @*<div class="modal-footer">
                                </div>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<script src="~/Scripts/jquery-2.0.3.js" type="text/javascript"></script>

<script src="~/Scripts/knockout-3.0.0.js" type="text/javascript"></script>
<script src="~/Scripts/knockout.viewmodel.js" type="text/javascript"></script>

<script src="~/Scripts/bootstrap.js" type="text/javascript"></script>

<script src="~/Scripts/jquery.dataTables.js" type="text/javascript"></script>
<script type="text/javascript" src="~/Scripts/bootstrap-dataTables-paging.js"></script>

<script src="~/Scripts/bootstrap-datepicker.js" type="text/javascript"></script>

<script src="~/Scripts/select2.js" type="text/javascript"></script>

<script src="~/Scripts/toastr.js" type="text/javascript"></script>

<script>
    var koNamespace = {};
    var koTrnCallViewModel;

    var $trnCallMaxId;

    var $customerId;
    var $customer;

    var $productId;
    var $product;

    var $callStatusId;
    var $callStatus;

    var $answeredById;
    var $answeredBy;

    var $AssignedToId;
    var $AssignedTo;

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    koNamespace.initViewModel = function (call) {
        var paramId = getParameterByName("Id");
        var callViewModel;

        if (paramId == 0) {
            callViewModel = {
                Id: !document.getElementById("Id").value ? 0 : document.getElementById("Id").value,
                DateCalled: !document.getElementById("DateCalledMem").value ? "" : document.getElementById("DateCalledMem").value,
                CustomerId: !document.getElementById("CustomerIdMem").value ? "" : document.getElementById("CustomerIdMem").value,
                ProductId: !document.getElementById("ProductIdMem").value ? "" : document.getElementById("ProductIdMem").value,
                Caller: !document.getElementById("CallerMem").value ? "" : document.getElementById("CallerMem").value,
                Issue: !document.getElementById("IssueMem").value ? "" : document.getElementById("IssueMem").value,
                CallStatusId: !document.getElementById("CallStatusIdMem").value ? "" : document.getElementById("CallStatusIdMem").value,
                AnsweredById: !document.getElementById("AnsweredByIdMem").value ? "" : document.getElementById("AnsweredByIdMem").value,
                AssignedtoId: !document.getElementById("AssignedToIdMem").value ? "" : document.getElementById("AssignedToIdMem").value
            };
        }
        else {
            callViewModel = {
                Id: ko.observable(!call ? 0 : call.Id),
                DateCalled: ko.observable(!call ? "" : call.DateCalled),
                CustomerId: ko.observable(!call ? "" : call.CustomerId),
                ProductId: ko.observable(!call ? "" : call.ProductId),
                Caller: ko.observable(!call ? "" : call.Caller),
                Issue: ko.observable(!call ? "" : call.Issue),
                CallStatusId: ko.observable(!call ? "" : call.CallStatusId),
                AnsweredById: ko.observable(!call ? "" : call.AnsweredById),
                AssignedtoId: ko.observable(!call ? "" : call.AssignedtoId)
            };
        }
        return callViewModel;
    };

    koNamespace.bindData = function (call) {
        var viewModel = koNamespace.initViewModel(call);

        ko.applyBindings(viewModel, document.getElementById('callsViewModel'));
        koTrnCallViewModel = viewModel;

    };

    koNamespace.getTrnCall = function () {
        $.ajax({
            url: "@(Html.Raw(Url.Action("TrnCallDetail", "Call", new { Id = HttpContext.Current.Request.QueryString["Id"] })))",
            type: 'get',
            async: false,
            contentType: 'application/json',
            success: function (result) {
                koNamespace.bindData(result);
            }
        });
    };

    koNamespace.saveTrnCall = function () {
        $.ajax({
            url: "@Url.Action("TrnCallDetailSave", "Call")",
            async: false,
            type: 'post',
            data: ko.toJSON(koTrnCallViewModel),
            contentType: 'application/json',
            success: function () {
                toastr.success('Successfully Saved...');
            }
        });
    };

    function getTrnCallMaxId() {
        $.ajax({
            url: "@Url.Action("TrnCallDetailMaxId", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            responseType: "json",
            success:
            function (result) {
                $trnCallMaxId = result;
            }
        });
    }

    function selectCustomer(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectCustomerById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectProduct(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectProductById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }
    
    function selectCallStat(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectCallStatusById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectAnsweredBy(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectAnsweredByById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectAssignedTo(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectAssignedToById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    $(document).ready(function () {
        var trnCallId = "@HttpContext.Current.Request.QueryString["Id"]";
        
        ko.cleanNode(document.getElementById("callsViewModel"));

        koNamespace.getTrnCall();

        $('#DateCalledMem').on('click', function () {
            $('#DateCalledMem').datepicker('show');
        });

        selectCustomer(trnCallId, function (result) {
            $customerId = result.Id;
            $customer = result.Name;
        });

        selectProduct(trnCallId, function (result) {
            $productId = result.Id;
            $product = result.Product;
        });

        selectCallStat(trnCallId, function (result) {
            $callStatusId = result.Id;
            $callStatus = result.CallStatus;
        });

        selectAnsweredBy(trnCallId, function (result) {
            $answeredById = result.Id;
            $answeredBy = result.Name;
        });

        selectAssignedTo(trnCallId, function (result) {
            $AssignedToId = result.Id;
            $AssignedTo = result.Name;
        });

        var pageSize = 20;

        $('#CustomerIdSelect').select2({
            placeholder: 'Customer',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectCustomer", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $customerId, text: $customer };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var customerElem = document.getElementById("CustomerIdMem");
            customerElem.value = e.val;
            ko.utils.triggerEvent(customerElem, "change");
        });

        $('#ProductIdSelect').select2({
            placeholder: 'Product',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectProduct", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $productId, text: $product };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var productElem = document.getElementById("ProductIdMem");
            productElem.value = e.val;
            ko.utils.triggerEvent(productElem, "change");
        });

        $('#CallStatusIdSelect').select2({
            placeholder: 'Call Status',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectCallStatus", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $callStatusId, text: $callStatus };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var callStatusElem = document.getElementById("CallStatusIdMem");
            callStatusElem.value = e.val;
            ko.utils.triggerEvent(callStatusElem, "change");
        });

        $('#AnsweredByIdSelect').select2({
            placeholder: 'Answered By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectAnsweredBy", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $answeredById, text: $answeredBy };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);


            var answeredByElem = document.getElementById("AnsweredByIdMem");
            answeredByElem.value = e.val;
            ko.utils.triggerEvent(answeredByElem, "change");
        });

        $('#AssignedToIdSelect').select2({
            placeholder: 'Answered By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectAssignedTo", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $AssignedToId, text: $AssignedTo };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var assignedToElem = document.getElementById("AssignedToIdMem");
            assignedToElem.value = e.val;
            ko.utils.triggerEvent(assignedToElem, "change");
        });
    });

    @*function cmdPrint_onclick() {
        location.href = 'RepCallView?Id=' + '@HttpContext.Current.Request.QueryString["Id"]';
    }*@

    function cmdSave_onclick() {
        var paramId = getParameterByName("Id");

        if (paramId == 0) {
            koNamespace.bindData();
            if (confirm("Do you want save this record?...")) {
                koNamespace.saveTrnCall();

                getTrnCallMaxId();

                location.href = 'TrnCallDetailView?Id=' + $trnCallMaxId;
            }
        } else {
            if (confirm("Do you want update this record?...")) {
                koNamespace.saveTrnCall();
            }
        };
    }

    function cmdClose_onclick() {
        location.href = 'TrnCallListView';
    }

    </script>

<script>
    var koCallActionNamespace = {};
    var koTrnCallActionViewModel;

    var $callActionId;

    var $actedById;
    var $actedBy;

    var $actionTypeId;
    var $actionType;

    var $done;

    koCallActionNamespace.initViewModel = function (callActions) {
        var callActionViewModel;

        if ($callActionId == 0) {
            callActionViewModel = {
                CallActionId: !document.getElementById("CallActionId").value ? 0 : document.getElementById("CallActionId").value,
                CallId: !document.getElementById("CallIdMem").value ? "" : document.getElementById("CallIdMem").value,
                ActedBy: !document.getElementById("ActedByIdMem").value ? "" : document.getElementById("ActedByIdMem").value,
                Action: !document.getElementById("ActionMem").value ? "" : document.getElementById("ActionMem").value,
                EncodedDate: !document.getElementById("EncodedDateMem").value ? "" : document.getElementById("EncodedDateMem").value,
                TargetDate: !document.getElementById("TargetDateMem").value ? "" : document.getElementById("TargetDateMem").value,
                TargetTime: !document.getElementById("TargetTimeMem").value ? "" : document.getElementById("TargetTimeMem").value,
                AcceptedDate: !document.getElementById("AcceptedDateMem").value ? "" : document.getElementById("AcceptedDateMem").value,
                AcceptedTime: !document.getElementById("AcceptedTimeMem").value ? "" : document.getElementById("AcceptedTimeMem").value,
                AcceptedBy: !document.getElementById("AcceptedByMem").value ? "" : document.getElementById("AcceptedByMem").value,
                ActionTypeId: !document.getElementById("ActionTypeIdMem").value ? "" : document.getElementById("ActionTypeIdMem").value,
                Cost: !document.getElementById("CostMem").value ? "" : document.getElementById("CostMem").value,
                NumberOfHours: !document.getElementById("NumberOfHoursMem").value ? "" : document.getElementById("NumberOfHoursMem").value,
                Done: !document.getElementById("DoneMem").value ? "" : document.getElementById("DoneMem").value
            };
        }
        else {
            callActionViewModel = {
                CallActionId: ko.observable(!callActions ? 0 : callActions.CallActionId),
                CallId: ko.observable(!callActions ? 0 : callActions.CallId),
                ActedBy: ko.observable(!callActions ? 0 : callActions.ActedBy),
                Action: ko.observable(!callActions ? 0 : callActions.Action),
                EncodedDate: ko.observable(!callActions ? 0 : callActions.EncodedDate),
                TargetDate: ko.observable(!callActions ? 0 : callActions.TargetDate),
                TargetTime: ko.observable(!callActions ? 0 : callActions.TargetTime),
                AcceptedDate: ko.observable(!callActions ? 0 : callActions.AcceptedDate),
                AcceptedTime: ko.observable(!callActions ? 0 : callActions.AcceptedTime),
                AcceptedBy: ko.observable(!callActions ? 0 : callActions.AcceptedBy),
                ActionTypeId: ko.observable(!callActions ? 0 : callActions.ActionTypeId),
                Cost: ko.observable(!callActions ? 0 : callActions.Cost),
                NumberOfHours: ko.observable(!callActions ? 0 : callActions.NumberOfHours),
                Done: ko.observable(!callActions ? 0 : callActions.Done)
            };
        }
        return callActionViewModel;
    };

    koCallActionNamespace.bindDataCallAction = function (callActions) {
        var viewModel = koCallActionNamespace.initViewModel(callActions);

        ko.applyBindings(viewModel, document.getElementById('callActionsViewModel'));
        koTrnCallActionViewModel = viewModel;

    };

    koCallActionNamespace.getTrnCallAction = function () {
        $.ajax({
            url: "@Url.Action("TrnCallActionDetail", "Call")",
            data: { 'callActionId': $callActionId },
            type: 'get',
            async: false,
            contentType: 'application/json',
            success: function (result) {
                koCallActionNamespace.bindDataCallAction(result);
            },
            error: function(err) {
                alert(err);
            }
        });
    };

    koCallActionNamespace.saveTrnCallAction = function () {
        $.ajax({
            url: "@Url.Action("TrnCallActionDetailSave", "Call")",
            async: false,
            type: 'post',
            data: ko.toJSON(koTrnCallActionViewModel),
            contentType: 'application/json',
            success: function () {
                toastr.success('Successfully Saved...');
            }
        });
    };

    function selectActedBy(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectActedByById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
            function (result) {
                fn(result);
            }
        });
    }

    function selectActionType(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectActionTypeById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectDone(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectDoneByText", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
            function (result) {
                fn(result);
            }
        });
    }

    $(document).ready(function () {
        $('#EncodedDateMem').on('click', function () {
            $('#EncodedDateMem').datepicker('show');
        });

        $('#TargetDateMem').on('click', function() {
            $('#TargetDateMem').datepicker('show');
        });
        
        $('#AcceptedDateMem').on('click', function () {
            $('#AcceptedDateMem').datepicker('show');
        });

        $('#TrnCallActionListDatable').dataTable(
            {
                "bFilter": false,
                "bLengthChange": false,
                "sAjaxSource": "@Url.Action("TrnCallActionList", "Call", new {callId = HttpContext.Current.Request.QueryString["Id"] ?? "0"})",
                "aoColumns": [
                    {
                        "mData": "Id", "bSearchable": false,
                        "bSortable": false,
                        "sWidth": "40px",
                        "mRender": function (oObj) {
                            return '<button type="button" class="btn btn-labeled btn-primary" onclick="cmdDetailCallAction_onClick(' + oObj + ')"><span class="btn-label"><i class="glyphicon glyphicon-list"></i></span>Detail</button>';
                        }
                    },
                    {
                        "mData": "Id", "bSearchable": false,
                        "bSortable": false,
                        "sWidth": "40px",
                        "mRender": function (oObj) {
                            return '<button type="button" class="btn btn-labeled btn-danger" onclick="cmdDeleteCallAction_onClick(' + oObj + ')"><span class="btn-label"><i class="glyphicon glyphicon-trash"></i></span>Delete</button>';
                        }
                    },
                    { "mDataProp": "ActedBy" },
                    { "mDataProp": "CallAction" },
                    { "mDataProp": "AcceptedDate" },
                    { "mDataProp": "ActionType" },
                    { "mDataProp": "Done" }
                ]
            });
    });

    function load_callActionDetail(callActId) {
        $callActionId = callActId;
        var pageSize = 20;

        koCallActionNamespace.getTrnCallAction();

        selectActedBy($callActionId, function (result) {
            $actedById = result.Id;
            $actedBy = result.Name;
        });

        selectActionType($callActionId, function (result) {
            $actionTypeId = result.Id;
            $actionType = result.ActionType;
        });

        selectDone($callActionId, function (result) {
            $done = result.Done;
        });

        $('#ActedByIdSelect').select2({
            placeholder: 'Acted By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectActedBy", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
           ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if ($callActionId !== "") {
                    var data = { id: $actedById, text: $actedBy };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var actedByElem = document.getElementById("ActedByIdMem");
            actedByElem.value = e.val;
            ko.utils.triggerEvent(actedByElem, "change");
        });

        $('#ActionTypeIdSelect').select2({
            placeholder: 'Action Type',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectActionType", "Call")',
                dataType: 'jsonp',
                data: function(term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function(data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            allowClear: true,
            formatSelection: function(data) {
                return data.text;
            },
            initSelection: function(element, callback) {
                if ($callActionId !== "") {
                    var data = { id: $actionTypeId, text: $actionType };
                    callback(data);
                }
            }
        }).on('change', function(e) {
            console.log(e.val);

            var actionTypeElem = document.getElementById("ActionTypeIdMem");
            actionTypeElem.value = e.val;
            ko.utils.triggerEvent(actionTypeElem, "change");
        });

        $('#DoneSelect').select2({
            placeholder: 'Done'
        }).on('change', function(e) {
            var doneElem = document.getElementById("DoneMem");
            doneElem.value = e.val;
            ko.utils.triggerEvent(doneElem, "change");
        }).select2('val', $done);

        $('#callActionModal').modal('toggle');
        $.fn.modal.Constructor.prototype.enforceFocus = function() {
        };
    }

    function cmdAddCallAction_onClick() {
        var callId = "@HttpContext.Current.Request.QueryString["Id"]";
        
        if (callId == "")
        {
            alert('Not Allowed, Please add save first the call...');
        }
        else {
            load_callActionDetail(0);
        }
    }

    function cmdDetailCallAction_onClick(callActId) {
            load_callActionDetail(callActId);
    }

    function cmdDeleteCallAction_onClick(callActId) {
        if (confirm("Do you want to delete this call action: " + callActId)) {
            var data = { 'id': callActId };
            $.post('@Url.Action("TrnCallActionListDelete", "Call")', data,
                function (retdata) {
                    if (retdata == true) {
                        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
                        toastr.info("Record Deleted succesfully..");
                    }
                    else
                        toastr.error("Record Delete failed...");
                });
        }
    }

    function cmdCallActionPrint_onClick() {
        if ($callActionId == 0){
            alert("Please save before printing...");
        }
        else{
            location.href = 'RepCallActionView?Id=' + $callActionId;
        }
    }

    function cmdSaveCallAction_onClick() {
        var callIdElem = document.getElementById("CallIdMem");
        callIdElem.value = "@HttpContext.Current.Request.QueryString["Id"]";
        ko.utils.triggerEvent(callIdElem, "change");

        if ($callActionId == 0) {
            if (confirm("Do you want save this record?...")) {
                koCallActionNamespace.saveTrnCallAction();
            }
        } else {
            if (confirm("Do you want update this record?...")) {
                koCallActionNamespace.saveTrnCallAction();
            }
        };
        
        ko.cleanNode(document.getElementById("callActionsViewModel"));

        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
    }

    function cmdCallActionClose_onClick() {   
        ko.cleanNode(document.getElementById("callActionsViewModel"));

        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
    }

</script>
